import type {
  ModelAttrs,
  ModelId,
  ModelInstance,
  ModelTemplate,
  NewModelAttrs,
  PartialModelAttrs,
} from '@src/model';
import type { SchemaCollections, SchemaInstance } from '@src/schema';
import { MirageError } from '@src/utils';

import type { FactoryAttrs, FactoryAfterCreateHook, ModelTraits, TraitName } from './types';

/**
 * Factory that builds model attributes with optional schema support.
 * @template TSchema - The schema collections type (never = schema-independent)
 * @template TTemplate - The model template (inferred from constructor)
 * @template TTraits - The factory traits (inferred from constructor)
 */
export default class Factory<
  TTemplate extends ModelTemplate = ModelTemplate,
  TSchema extends SchemaCollections = SchemaCollections,
  TTraits extends ModelTraits<TSchema, TTemplate> = {},
> {
  private readonly _template: TTemplate;
  readonly attributes: FactoryAttrs<TTemplate>;
  readonly traits: TTraits;
  readonly afterCreate?: FactoryAfterCreateHook<TSchema, TTemplate>;

  constructor(
    template: TTemplate,
    attributes: FactoryAttrs<TTemplate>,
    traits: TTraits = {} as TTraits,
    afterCreate?: FactoryAfterCreateHook<TSchema, TTemplate>,
  ) {
    this._template = template;
    this.attributes = attributes;
    this.traits = traits;
    this.afterCreate = afterCreate;
  }

  /**
   * Get the model template
   * @returns The model template
   */
  get template(): TTemplate {
    return this._template;
  }

  /**
   * Build a model with the given model ID and trait names or default values.
   * @param modelId - The ID of the model to build.
   * @param traitsAndDefaults - The names of the traits to apply or default values for attributes.
   * @returns The built model.
   */
  build(
    modelId: ModelId<TTemplate>,
    ...traitsAndDefaults: (TraitName<TTraits> | PartialModelAttrs<TTemplate>)[]
  ): ModelAttrs<TTemplate> {
    const traitNames: string[] = [];
    const defaults: PartialModelAttrs<TTemplate> = {};

    // Separate trait names from default values
    traitsAndDefaults.forEach((arg) => {
      if (typeof arg === 'string') {
        traitNames.push(arg);
      } else {
        Object.assign(defaults, arg);
      }
    });

    const processedAttributes = this._processAttributes(this.attributes, modelId);
    const traitAttributes = this._buildWithTraits(traitNames, modelId);

    // Merge attributes in order: defaults override traits, traits override base attributes
    const mergedAttributes = this._mergeAttributes(processedAttributes, traitAttributes);

    // Add user defaults and the autogenerated id
    return {
      ...mergedAttributes,
      ...defaults,
      id: modelId,
    } as ModelAttrs<TTemplate>;
  }

  /**
   * Process the afterCreate hook and the trait hooks.
   * This method is intended to be called internally by schema collections.
   * @param schema - The schema instance.
   * @param model - The model to process.
   * @param traitsAndDefaults - The traits and defaults that were applied.
   * @returns The processed model.
   */
  processAfterCreateHooks(
    schema: SchemaInstance<TSchema>,
    model: ModelInstance<TTemplate, TSchema>,
    ...traitsAndDefaults: (TraitName<TTraits> | PartialModelAttrs<TTemplate>)[]
  ): ModelInstance<TTemplate, TSchema> {
    const traitNames: string[] = traitsAndDefaults.filter((arg) => typeof arg === 'string');
    const hooks: FactoryAfterCreateHook<TSchema, TTemplate>[] = [];

    if (this.afterCreate) {
      hooks.push(this.afterCreate);
    }

    traitNames.forEach((name) => {
      const trait = this.traits[name as TraitName<TTraits>];

      if (trait?.afterCreate) {
        hooks.push(trait.afterCreate);
      }
    });

    // Execute hooks with the properly typed model instance and schema
    hooks.forEach((hook) => {
      (hook as (model: ModelInstance<TTemplate, TSchema>, schema: SchemaInstance<TSchema>) => void)(
        model,
        schema,
      );
    });

    return model;
  }

  // -- PRIVATE METHODS --

  private _processAttributes(
    attrs: FactoryAttrs<TTemplate>,
    modelId?: ModelId<TTemplate>,
  ): PartialModelAttrs<TTemplate> {
    const keys = this._sortAttrs(attrs, modelId);

    const result = keys.reduce(
      (acc, key) => {
        if (key === 'id') {
          return acc;
        }

        const currentKey = key as keyof PartialModelAttrs<TTemplate>;
        const value = (attrs as any)[currentKey];

        if (typeof value === 'function') {
          acc[key as string] = value.call(attrs, modelId);
        } else {
          acc[key as string] = value;
        }

        return acc;
      },
      {} as Record<string, any>,
    );

    return result as PartialModelAttrs<TTemplate>;
  }

  private _buildWithTraits(
    traitNames: string[],
    modelId?: ModelId<TTemplate>,
  ): PartialModelAttrs<TTemplate> {
    const result = traitNames.reduce(
      (traitAttributes, name) => {
        const trait = this.traits[name as TraitName<TTraits>];

        if (trait) {
          const { afterCreate, ...extension } = trait;

          Object.entries(extension).forEach(([key, value]) => {
            if (key !== 'id') {
              traitAttributes[key] =
                typeof value === 'function' ? value.call(this.attributes, modelId) : value;
            }
          });
        }

        return traitAttributes;
      },
      {} as Record<string, any>,
    );

    return result as PartialModelAttrs<TTemplate>;
  }

  private _mergeAttributes(
    baseAttributes: PartialModelAttrs<TTemplate>,
    overrideAttributes: PartialModelAttrs<TTemplate>,
  ): PartialModelAttrs<TTemplate> {
    return {
      ...baseAttributes,
      ...overrideAttributes,
    };
  }

  private _sortAttrs(
    attrs: FactoryAttrs<TTemplate>,
    modelId?: ModelId<TTemplate>,
  ): (keyof NewModelAttrs<TTemplate>)[] {
    const visited = new Set<string>();
    const processing = new Set<string>();

    const detectCycle = (key: string): boolean => {
      if (processing.has(key)) {
        throw new MirageError(`Circular dependency detected: ${key}`);
      }
      if (visited.has(key)) {
        return false;
      }

      processing.add(key);
      const value = attrs[key as Exclude<keyof NewModelAttrs<TTemplate>, 'id'>];

      if (typeof value === 'function') {
        // Create a proxy to track property access
        const proxy = new Proxy(attrs, {
          get(target, prop) {
            if (typeof prop === 'string' && prop in target) {
              detectCycle(prop);
            }
            return target[prop as keyof typeof target];
          },
        });

        // Call the function with the proxy as this context
        (value as Function).call(proxy, modelId);
      }

      processing.delete(key);
      visited.add(key);
      return false;
    };

    // Check each attribute for cycles
    Object.keys(attrs).forEach(detectCycle);

    // Return keys in their original order
    return Object.keys(attrs) as (keyof NewModelAttrs<TTemplate>)[];
  }
}
